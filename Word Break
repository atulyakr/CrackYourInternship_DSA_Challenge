
class Solution {
public:
   
    bool solve(int idx,string &s,unordered_set<string>&st, vector<int>&dp){
        if(idx==s.size())
            return true;

        if(st.find(s.substr( idx , s.size() - idx )) != st.end()) {
            return true;
        }

        if(dp[idx]!=-1){
            return dp[idx];
        }
        for(int l=1; l <=s.size(); l++ ){
            string temp=s.substr(idx,l);
            if(st.find(temp)!=st.end() && solve(idx+l,s,st,dp)){
                return dp[idx]=true;
            }      
        }
        return dp[idx]=false;
    }
    bool wordBreak(string s, vector<string>& wordDict) {
        unordered_set<string>st;
        vector<int>dp(s.size()+1,-1);
        for(string &word: wordDict)
            st.insert(word);

        return solve(0,s,st,dp);
    }
};
